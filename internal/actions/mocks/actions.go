// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/actions/actions.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGithubClient is a mock of GithubClient interface
type MockGithubClient struct {
	ctrl     *gomock.Controller
	recorder *MockGithubClientMockRecorder
}

// MockGithubClientMockRecorder is the mock recorder for MockGithubClient
type MockGithubClientMockRecorder struct {
	mock *MockGithubClient
}

// NewMockGithubClient creates a new mock instance
func NewMockGithubClient(ctrl *gomock.Controller) *MockGithubClient {
	mock := &MockGithubClient{ctrl: ctrl}
	mock.recorder = &MockGithubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGithubClient) EXPECT() *MockGithubClientMockRecorder {
	return m.recorder
}

// Dispatch mocks base method
func (m *MockGithubClient) Dispatch(ctx context.Context, owner, repo, event string, payload []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatch", ctx, owner, repo, event, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// Dispatch indicates an expected call of Dispatch
func (mr *MockGithubClientMockRecorder) Dispatch(ctx, owner, repo, event, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatch", reflect.TypeOf((*MockGithubClient)(nil).Dispatch), ctx, owner, repo, event, payload)
}
