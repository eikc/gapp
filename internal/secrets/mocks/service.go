// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/secrets/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	internal "github.com/eikc/gapp/internal"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockWriter is a mock of Writer interface
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// UpdateSecret mocks base method
func (m *MockWriter) UpdateSecret(ctx context.Context, owner, repo string, secret internal.Secret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", ctx, owner, repo, secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecret indicates an expected call of UpdateSecret
func (mr *MockWriterMockRecorder) UpdateSecret(ctx, owner, repo, secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockWriter)(nil).UpdateSecret), ctx, owner, repo, secret)
}

// MockParser is a mock of Parser interface
type MockParser struct {
	ctrl     *gomock.Controller
	recorder *MockParserMockRecorder
}

// MockParserMockRecorder is the mock recorder for MockParser
type MockParserMockRecorder struct {
	mock *MockParser
}

// NewMockParser creates a new mock instance
func NewMockParser(ctrl *gomock.Controller) *MockParser {
	mock := &MockParser{ctrl: ctrl}
	mock.recorder = &MockParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockParser) EXPECT() *MockParserMockRecorder {
	return m.recorder
}

// Parse mocks base method
func (m *MockParser) Parse(path string) (map[string][]internal.Secret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", path)
	ret0, _ := ret[0].(map[string][]internal.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse
func (mr *MockParserMockRecorder) Parse(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockParser)(nil).Parse), path)
}

// MockSpinner is a mock of Spinner interface
type MockSpinner struct {
	ctrl     *gomock.Controller
	recorder *MockSpinnerMockRecorder
}

// MockSpinnerMockRecorder is the mock recorder for MockSpinner
type MockSpinnerMockRecorder struct {
	mock *MockSpinner
}

// NewMockSpinner creates a new mock instance
func NewMockSpinner(ctrl *gomock.Controller) *MockSpinner {
	mock := &MockSpinner{ctrl: ctrl}
	mock.recorder = &MockSpinnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSpinner) EXPECT() *MockSpinnerMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockSpinner) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockSpinnerMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSpinner)(nil).Start))
}

// Message mocks base method
func (m *MockSpinner) Message(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Message", msg)
}

// Message indicates an expected call of Message
func (mr *MockSpinnerMockRecorder) Message(msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Message", reflect.TypeOf((*MockSpinner)(nil).Message), msg)
}

// Stop mocks base method
func (m *MockSpinner) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockSpinnerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSpinner)(nil).Stop))
}

// Fail mocks base method
func (m *MockSpinner) Fail() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fail")
	ret0, _ := ret[0].(error)
	return ret0
}

// Fail indicates an expected call of Fail
func (mr *MockSpinnerMockRecorder) Fail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fail", reflect.TypeOf((*MockSpinner)(nil).Fail))
}
